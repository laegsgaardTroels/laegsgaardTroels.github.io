I"Û <p>Some useful patterns / tricks I find myself using at work.<!--more--></p>

<h2 id="union-after-loop">Union after loop</h2>

<p>Sometimes it is usefull to append DataFrameâ€™s in a list and union them back together afterwards.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">DataFrame</span>
<span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>

<span class="n">shell</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">M</span><span class="p">):</span>
    <span class="n">df</span> <span class="o">=</span> <span class="p">...</span>
    <span class="n">shell</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>

<span class="n">res</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">unionAll</span><span class="p">,</span> <span class="n">shell</span><span class="p">)</span>
</code></pre></div></div>

<p>Each df in the loop has the same schema. Note that <code class="language-plaintext highlighter-rouge">.unionAll</code> and <code class="language-plaintext highlighter-rouge">.union</code> are equivalent, but <code class="language-plaintext highlighter-rouge">.unionAll</code> is more explicit.</p>

<h2 id="use-a-broadcast-variable-in-a-udf">Use a Broadcast variable in a UDF</h2>

<p>A broadcast variable is useful too look up values, the values in a broadcast variable can be accessed using the <code class="language-plaintext highlighter-rouge">.value</code> attribute in a udf.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
<span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">functions</span> <span class="k">as</span> <span class="n">F</span>
<span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">types</span> <span class="k">as</span> <span class="n">T</span>

<span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="n">getOrCreate</span><span class="p">()</span>

<span class="n">foo</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'a'</span><span class="p">:</span> <span class="s">'b'</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">bc_foo</span> <span class="o">=</span> <span class="n">spark</span><span class="p">.</span><span class="n">sparkContext</span><span class="p">.</span><span class="n">broadcast</span><span class="p">(</span><span class="n">foo</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_look_up</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="n">foo_</span> <span class="o">=</span> <span class="n">bc_foo</span><span class="p">.</span><span class="n">value</span>
    <span class="k">return</span> <span class="n">foo_</span><span class="p">[</span><span class="n">x</span><span class="p">]</span>    

<span class="n">udf_calculate</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">udf</span><span class="p">(</span><span class="n">_look_up</span><span class="p">,</span> <span class="n">T</span><span class="p">.</span><span class="n">DoubleType</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="return-multiple-outputs-from-a-udf">Return Multiple Outputs from a UDF</h2>

<p>A UDF can return multiple values if one return af StructType.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
<span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">functions</span> <span class="k">as</span> <span class="n">F</span>
<span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">types</span> <span class="k">as</span> <span class="n">T</span>

<span class="k">def</span> <span class="nf">_calculate</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="p">...</span>    
    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span>

<span class="n">schema</span> <span class="o">=</span> <span class="n">T</span><span class="p">.</span><span class="n">StructType</span><span class="p">([</span>
    <span class="n">T</span><span class="p">.</span><span class="n">StructField</span><span class="p">(</span><span class="s">"x"</span><span class="p">,</span> <span class="n">T</span><span class="p">.</span><span class="n">DoubleType</span><span class="p">(),</span>
    <span class="n">T</span><span class="p">.</span><span class="n">StructField</span><span class="p">(</span><span class="s">"y"</span><span class="p">,</span> <span class="n">T</span><span class="p">.</span><span class="n">DoubleType</span><span class="p">(),</span>
    <span class="n">T</span><span class="p">.</span><span class="n">StructField</span><span class="p">(</span><span class="s">"z"</span><span class="p">,</span> <span class="n">T</span><span class="p">.</span><span class="n">DoubleType</span><span class="p">(),</span>
<span class="p">])</span>
<span class="n">udf_multiple_results</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">udf</span><span class="p">(</span><span class="n">_calculate</span><span class="p">,</span> <span class="n">schema</span><span class="p">)</span>
</code></pre></div></div>

<p>This UDF will take one input x and return a nested column with three fields called x, y, z. Can be accessed using:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">df</span>
    <span class="p">.</span><span class="n">withColumn</span><span class="p">(</span>
        <span class="s">"nested_column"</span><span class="p">,</span>
        <span class="n">udf_multiple_results</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="n">select</span><span class="p">(</span>
        <span class="n">F</span><span class="p">.</span><span class="n">col</span><span class="p">(</span><span class="s">'nested_column.x'</span><span class="p">).</span><span class="n">alias</span><span class="p">(</span><span class="s">'x'</span><span class="p">),</span>
        <span class="n">F</span><span class="p">.</span><span class="n">col</span><span class="p">(</span><span class="s">'nested_column.y'</span><span class="p">).</span><span class="n">alias</span><span class="p">(</span><span class="s">'y'</span><span class="p">),</span>
        <span class="n">F</span><span class="p">.</span><span class="n">col</span><span class="p">(</span><span class="s">'nested_column.z'</span><span class="p">).</span><span class="n">alias</span><span class="p">(</span><span class="s">'z'</span><span class="p">),</span>
    <span class="p">)</span>
<span class="p">)</span>
</code></pre></div></div>

<p>And flattened using</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'nested_column.*'</span><span class="p">)</span>
</code></pre></div></div>
:ET