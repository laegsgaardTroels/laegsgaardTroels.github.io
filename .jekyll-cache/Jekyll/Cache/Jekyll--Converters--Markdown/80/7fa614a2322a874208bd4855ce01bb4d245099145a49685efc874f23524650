I"(<p>While working at Maersk there was a power-to-speed model used for planning, basically a polynomial inferred from a regression, taking in some extra inputs besides power and outputting speed. For this model there was defined valid input power levels. In this post I will talk about my thoughts on why it seems useful to define the operational range AND data type of an inferred function in an operational setting. <!--more--></p>

<h2 id="basic-implementation">Basic Implementation</h2>

<p>A very basic implementation of the operational range would be. If implementered in Python then I would also use dicts to specify the datatypes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># dtype.py
</span>
<span class="c1"># The range of variables in X.
</span><span class="n">X_RANGE</span> <span class="o">=</span> <span class="p">{</span><span class="s">'power'</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">80000</span><span class="p">]}</span>

<span class="c1"># The range of variables in y.
</span><span class="n">Y_RANGE</span> <span class="o">=</span> <span class="p">{</span><span class="s">'speed'</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">30</span><span class="p">]}</span>

<span class="c1"># The datatype of the inputs.
</span><span class="n">X_DTYPE</span> <span class="o">=</span> <span class="p">{</span><span class="s">'power'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">}</span>

<span class="c1"># The datatype of the output.
</span><span class="n">Y_DTYPE</span> <span class="o">=</span> <span class="p">{</span><span class="s">'power'</span><span class="p">:</span> <span class="s">'float64'</span><span class="p">}</span>
</code></pre></div></div>

<p>Useful things you can do when you define the operational range:</p>

<ul>
  <li>Test that predictions are within the operational range for input values in the operational range.</li>
  <li>Create standard reports to investigate yourself or ideally subject matter experts.</li>
  <li>Approximate the partial relationships between two variables by partial dependence plots (or a rough approximation to it).</li>
  <li>If the datatypes are specified then this it is easy to specify the spec of an API to users.</li>
  <li>If the datatypes is specified then parsing mistakes can be avoided by creating functions to load the data.</li>
</ul>

<h2 id="related-thought-basic-functional-relationships">Related Thought: Basic Functional Relationships</h2>

<p>To be even more specific one could specify a range on valid speed levels $[s_{min}(p), s_{max}(p)]$ for each power level $p$. This would naturally lead to a lower bound on how bad the model is:</p>

\[\lvert \text{prediction}(p) - \text{actual}(p) \rvert \leq s_{max}(p) - s_{min}(p)\]

<h2 id="related-thought--sample-of-the-data">Related Thought:  Sample of the data</h2>

<p>With a sample of the data one can do similar thing but above could be faster to compute and easier to standardize.</p>

<p>A sample of the data with 1000 rows are however easy to keep as a <code class="language-plaintext highlighter-rouge">pytest</code> fixture so I would probably do this anyway.</p>
:ET