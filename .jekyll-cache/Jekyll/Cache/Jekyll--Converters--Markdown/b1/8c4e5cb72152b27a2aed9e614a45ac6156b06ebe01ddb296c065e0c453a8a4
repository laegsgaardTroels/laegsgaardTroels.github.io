I"‰<p>When making stuff in a Jupyter Notebook I often find it usefull to refactor stuff I use across notebooks into a Python module. To do this smoothly I install the module in editable mode and use the awesome Jupyter autoreload magic. <!--more--></p>

<p>A minimal example is a project:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.
â”œâ”€â”€ foo
â”‚Â Â  â””â”€â”€ __init__.py
â”œâ”€â”€ notebooks
â”‚Â Â  â””â”€â”€ example.ipynb
â”œâ”€â”€ README.md
â””â”€â”€ setup.py
</code></pre></div></div>

<p>Now we create a virtual environment:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~<span class="nv">$ </span>virtualenv .venv
~<span class="nv">$ </span><span class="nb">source</span> .venv/bin/activate
~<span class="nv">$ </span>pip <span class="nb">install </span>jupyterlab
~<span class="nv">$ </span>pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-e</code> flag installs the module in editable mode, meaning that you can modify your source code in <code class="language-plaintext highlighter-rouge">foo/</code> and have the changes take effect without you having to rebuild and reinstall, see [3].</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~<span class="nv">$ </span>pip <span class="nb">install</span> <span class="nt">-h</span>
<span class="nt">-e</span>, <span class="nt">--editable</span> &lt;path/url&gt;   Install a project <span class="k">in </span>editable mode <span class="o">(</span>i.e. setuptools <span class="s2">"develop mode"</span><span class="o">)</span> from a <span class="nb">local </span>project path or a VCS url.
</code></pre></div></div>

<h2 id="jupyter-magic">Jupyter magic</h2>

<p><code class="language-plaintext highlighter-rouge">autoreload</code> is an IPython extension to reload modules before executing user code.</p>

<p><code class="language-plaintext highlighter-rouge">autoreload</code> reloads modules automatically before entering the execution of code typed at the IPython prompt.</p>

<p>This makes for example the following workflow possible:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">load_ext</span> <span class="n">autoreload</span>
<span class="o">%</span><span class="n">autoreload</span> <span class="mi">2</span>
<span class="kn">from</span> <span class="nn">foo</span> <span class="kn">import</span> <span class="n">some_function</span>
<span class="n">some_function</span><span class="p">()</span>
<span class="c1"># 42
</span></code></pre></div></div>

<p>Open <code class="language-plaintext highlighter-rouge">foo/__init__.py</code> in an editor and change <code class="language-plaintext highlighter-rouge">some_function</code> to return 43.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">some_function</span><span class="p">()</span>
<span class="c1"># 43
</span></code></pre></div></div>
<p>The module was reloaded without reloading it explicitly, and the object imported with <code class="language-plaintext highlighter-rouge">from foo import some_function</code> was also updated.</p>

<h1 id="references">References</h1>

<p>[1] https://pip.pypa.io/en/latest/cli/pip_install/#editable-installs</p>

<p>[2] https://ipython.org/ipython-doc/3/config/extensions/autoreload.html</p>

<p>[3] https://setuptools.readthedocs.io/en/latest/userguide/quickstart.html#development-mode</p>
:ET